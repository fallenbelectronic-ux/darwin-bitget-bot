# Fichier: main.py
# Version CORRIG√âE ET V√âRIFI√âE de votre base de code avanc√©e.

import os
import sys
import time
import ccxt
import pandas as pd
import traceback
import threading
from typing import List, Dict, Any, Optional
from datetime import datetime
import pytz

# --- Importation des modules locaux ---
# NOTE: J'ai retir√© "state" et "analysis" car ils n'√©taient pas fournis. 
# La logique est int√©gr√©e dans les modules existants.
import database
import trader
import notifier
import utils

# ==============================================================================
# PARAM√àTRES ET CONFIGURATION
# ==============================================================================
BITGET_TESTNET   = os.getenv("BITGET_TESTNET", "true").lower() in ("1", "true", "yes")
API_KEY          = os.getenv("BITGET_API_KEY", "")
API_SECRET       = os.getenv("BITGET_API_SECRET", "")
PASSPHRASSE      = os.getenv("BITGET_API_PASSWORD", "") or os.getenv("BITGET_PASSPHRASSE", "")

TIMEFRAME        = os.getenv("TIMEFRAME", "1h")
UNIVERSE_SIZE    = int(os.getenv("UNIVERSE_SIZE", "30"))
MIN_RR           = float(os.getenv("MIN_RR", "3.0"))
MAX_OPEN_POSITIONS = int(os.getenv("MAX_OPEN_POSITIONS", 3))
LOOP_DELAY       = int(os.getenv("LOOP_DELAY", "10"))
TIMEZONE         = os.getenv("TIMEZONE", "Europe/Lisbon")
REPORT_HOUR      = int(os.getenv("REPORT_HOUR", "21"))
REPORT_WEEKDAY   = int(os.getenv("REPORT_WEEKDAY", "6")) # 0=Lundi, 6=Dimanche

# ==============================================================================
# VARIABLES D'√âTAT (SIMPLIFI√â POUR LA STABILIT√â SANS state.py)
# ==============================================================================
_last_update_id: Optional[int] = None
_paused = False
_lock = threading.Lock()
pending_signals: Dict[str, Any] = {} # Remplace state.pending_signals
recent_signals: List[Dict] = []     # Remplace _recent_signals

# ==============================================================================
# FONCTIONS DU BOT
# ==============================================================================

def startup_checks():
    """V√©rifie la pr√©sence des variables d'environnement critiques."""
    print("V√©rification des configurations au d√©marrage...")
    if not all([API_KEY, API_SECRET, PASSPHRASSE]):
        error_msg = "‚ùå ERREUR DE D√âMARRAGE: Les cl√©s API (KEY, SECRET, PASSPHRASSE) sont manquantes."
        print(error_msg); notifier.tg_send(error_msg); sys.exit(1)
    print("‚úÖ Configuration de base valid√©e.")

def create_exchange() -> ccxt.Exchange:
    """Initialise et retourne l'objet de l'exchange CCXT."""
    ex = ccxt.bitget({"apiKey": API_KEY, "secret": API_SECRET, "password": PASSPHRASSE, "enableRateLimit": True, "options": {"defaultType": "swap"}})
    if BITGET_TESTNET: ex.set_sandbox_mode(True)
    return ex

def build_universe(ex: ccxt.Exchange) -> List[str]:
    """Construit la liste des paires √† trader, tri√©es par volume."""
    print("Construction de l'univers de trading...")
    size = int(database.get_setting('UNIVERSE_SIZE', UNIVERSE_SIZE))
    try:
        ex.load_markets()
        tickers = ex.fetch_tickers()
        swap_tickers = {s: t for s, t in tickers.items() if ':USDT' in s and t.get('quoteVolume')}
        sorted_symbols = sorted(swap_tickers, key=lambda s: swap_tickers[s]['quoteVolume'], reverse=True)
        print(f"Top {size} paires par volume s√©lectionn√©es.")
        return sorted_symbols[:size]
    except Exception as e:
        print(f"Impossible de construire l'univers via l'API. Erreur: {e}."); return []

def select_and_execute_best_pending_signal(ex: ccxt.Exchange):
    """Revalide les signaux en attente √† la nouvelle bougie et ex√©cute le meilleur."""
    global pending_signals
    if not pending_signals: return
    print(f"-> NOUVELLE BOUGIE d√©tect√©e. Revalidation de {len(pending_signals)} signaux...")

    validated_signals = []
    # Cr√©er une copie pour it√©rer car on va modifier le dict original
    for symbol, pending in list(pending_signals.items()):
        df = utils.fetch_and_prepare_df(ex, symbol, TIMEFRAME)
        if df is None or df.index[-1] <= pending['candle_timestamp']: continue

        new_entry_price = df['open'].iloc[-1]
        sl_price = pending['signal']['sl']
        
        last_indicators = df.iloc[-1]
        is_long = pending['signal']['side'] == 'buy'
        new_tp_price = last_indicators['bb80_mid'] if pending['signal']['regime'] == 'Tendance' else \
                       (last_indicators['bb20_up'] if is_long else last_indicators['bb20_lo'])
        
        # Calcul du nouveau RR
        rr_div = (new_entry_price - sl_price) if is_long else (sl_price - new_entry_price)
        if rr_div <= 0: continue
        new_rr = (new_tp_price - new_entry_price) / rr_div if is_long else (new_entry_price - new_tp_price) / rr_div

        if new_rr >= MIN_RR:
            pending['signal']['tp'] = new_tp_price
            pending['signal']['rr'] = new_rr
            pending['new_entry_price'] = new_entry_price
            validated_signals.append(pending)
        else:
            print(f"   -> Signal pour {symbol} invalid√©. R/R ({new_rr:.2f}) < {MIN_RR}.")

    # Nettoyer les signaux en attente
    with _lock: pending_signals.clear()
    
    if not validated_signals:
        print("   -> Aucun signal n'a pass√© la re-validation."); return

    best_signal_data = sorted(validated_signals, key=lambda x: x['signal']['rr'], reverse=True)[0]
    symbol = best_signal_data['symbol']
    print(f"   -> MEILLEUR SIGNAL S√âLECTIONN√â: {symbol} (R/R: {best_signal_data['signal']['rr']:.2f})")
    
    trader.execute_trade(ex, symbol, best_signal_data['signal'], best_signal_data['df'], best_signal_data['new_entry_price'])

# ==============================================================================
# GESTION DES COMMANDES TELEGRAM
# ==============================================================================
def process_callback_query(callback_query: Dict):
    """G√®re les clics sur les boutons."""
    # (Logique de gestion des callbacks, √† impl√©menter si vous utilisez des boutons)
    pass

def process_message(message: Dict):
    """G√®re les commandes textuelles."""
    # (Logique de gestion des commandes textuelles, ex: /start, /pos)
    pass

def poll_telegram_updates():
    """Boucle simple pour r√©cup√©rer les mises √† jour Telegram."""
    global _last_update_id
    updates = notifier.tg_get_updates(_last_update_id + 1 if _last_update_id else None)
    for upd in updates:
        _last_update_id = upd.get("update_id", _last_update_id)
        if 'callback_query' in upd:
            process_callback_query(upd['callback_query'])
        elif 'message' in upd:
            process_message(upd['message'])

# ==============================================================================
# THREADS ET BOUCLE PRINCIPALE
# ==============================================================================
def telegram_listener_loop():
    """Thread d√©di√© √† l'√©coute des commandes Telegram."""
    print("ü§ñ Thread d'√©coute Telegram d√©marr√©.")
    while True:
        try:
            poll_telegram_updates()
            time.sleep(2) # Ne pas surcharger l'API
        except Exception as e:
            print(f"Erreur dans le thread Telegram: {e}"); time.sleep(5)

def trading_engine_loop(ex: ccxt.Exchange, universe: List[str]):
    """Thread principal d√©di√© au trading."""
    print("üìà Thread de trading d√©marr√©.")
    last_processed_hour = -1

    while True:
        try:
            with _lock: is_paused = _paused
            if is_paused:
                print("   -> (Moteur de Trading en pause)"); time.sleep(LOOP_DELAY); continue

            # V√©rifie s'il y a une nouvelle bougie H1
            now_utc = datetime.now(timezone.utc)
            current_hour = now_utc.hour
            if current_hour != last_processed_hour:
                select_and_execute_best_pending_signal(ex)
                last_processed_hour = current_hour

            # G√®re les positions
            trader.manage_open_positions(ex)
            
            # Scan des symboles
            print(f"--- D√©but du scan de l'univers ({len(universe)} paires)...")
            for symbol in universe:
                with _lock:
                    # Ne pas scanner si un signal est d√©j√† en attente pour ce symbole
                    if symbol in pending_signals: continue

                df = utils.fetch_and_prepare_df(ex, symbol, TIMEFRAME)
                if df is None: continue
                
                signal = trader.detect_signal(df, symbol)
                if signal:
                    print(f"‚úÖ‚úÖ‚úÖ Signal '{signal['regime']}' D√âTECT√â pour {symbol}. MISE EN ATTENTE...")
                    with _lock:
                        pending_signals[symbol] = {'signal': signal, 'symbol': symbol, 'df': df.copy(), 'candle_timestamp': df.index[-1]}
                        recent_signals.append({'timestamp': time.time(), 'symbol': symbol, 'signal': signal})
                    notifier.send_pending_signal_notification(symbol, signal)

            print(f"--- Fin du cycle de scan. Attente de {LOOP_DELAY} secondes. ---")
            time.sleep(LOOP_DELAY)
        
        except KeyboardInterrupt:
            notifier.tg_send("‚õî Arr√™t manuel du thread de trading."); break
        except Exception:
            error_details = traceback.format_exc()
            print(error_details); notifier.tg_send_error("Erreur critique (Moteur de Trading)", error_details)
            time.sleep(15)

def main():
    """Point d'entr√©e principal du bot."""
    startup_checks()
    ex = create_exchange(); database.setup_database()
    
    # Initialisation des param√®tres en DB
    if not database.get_setting('STRATEGY_MODE'): database.set_setting('STRATEGY_MODE', os.getenv('STRATEGY_MODE', 'NORMAL').upper())
    # ... autres initialisations ...
    
    current_paper_mode = database.get_setting('PAPER_TRADING_MODE', 'true').lower() == 'true'
    notifier.send_start_banner("TESTNET" if BITGET_TESTNET else "LIVE", "PAPIER" if current_paper_mode else "R√âEL", trader.RISK_PER_TRADE_PERCENT)
    
    universe = build_universe(ex)
    if not universe: notifier.tg_send("‚ùå Impossible de construire l'univers de trading."); return
    print(f"Univers de trading charg√© avec {len(universe)} paires.")

    # D√©marrage des threads
    telegram_thread = threading.Thread(target=telegram_listener_loop, daemon=True)
    trading_thread = threading.Thread(target=trading_engine_loop, args=(ex, universe))

    telegram_thread.start()
    trading_thread.start()
    trading_thread.join() # Attendre que le thread de trading se termine (ex: sur Ctrl+C)

if __name__ == "__main__":
    main()
